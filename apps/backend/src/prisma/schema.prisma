generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  USER
  INFLUENCER
  ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum CodeType {
  MAIN
  EXTRA
}

enum PointReason {
  SPIN
  REDEEM
  BONUS
  EXPIRATION
}

enum RedeemStatus {
  PENDING
  COMPLETED
  SHIPPED
  FAILED
}

enum BadgeType {
  FIRST_SPIN
  HIGH_ROLLER
  STREAK_MASTER
}

enum ActionType {
  SPIN
  PURCHASE
  REDEEM
  CONFIG_CHANGE
}

enum Period {
  DAILY
  WEEKLY
  MONTHLY
}

// Models
model users {
  id               String            @id @default(uuid()) @db.Uuid
  email            String            @unique @db.VarChar(255)
  password_hash    String            @db.VarChar(255)
  name             String            @db.VarChar(100)
  role             Role              @default(USER)
  points_balance   Decimal           @default(0.00) @db.Decimal(10, 2)
  birthdate        DateTime?         @db.Date
  referral_code    String?           @unique @db.VarChar(20)
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  deleted_at       DateTime?

  influencers          influencers?
  transactions         transactions[]
  spins                spins[]
  points_histories     points_histories[]
  redeems              redeems[]
  coupons              coupons[]
  streaks              streaks[]
  badges               badges[]
  leaderboards         leaderboards[]
  referrals_referrer   referrals[] @relation("referrer")
  referrals_referred   referrals[] @relation("referred")
  audit_logs           audit_logs[]

  @@index([role])
  @@index([referral_code])
}

model influencers {
  user_id         String        @id @db.Uuid
  bio             String?       @db.Text
  social_links    Json?
  follower_count  Int?
  commission_rate Decimal        @default(0.10) @db.Decimal(5, 2)

  user            users          @relation(fields: [user_id], references: [id])
  packages        packages[]
  horario_slots   horario_slots[]
  campaigns       campaigns[]
  margin_configs  margin_configs[]
  products        products[]

  @@index([user_id])
}

model packages {
  id              String         @id @default(uuid()) @db.Uuid
  name            String         @db.VarChar(100)
  original_price  Decimal        @db.Decimal(10, 2)
  promo_price     Decimal        @db.Decimal(10, 2)
  main_codes_qty  Int
  extra_codes_qty Int
  guarantees      Json?
  weights_main    Json?
  weights_extra   Json?
  influencer_id   String?        @db.Uuid
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  influencer      influencers?   @relation(fields: [influencer_id], references: [user_id])
  transactions    transactions[]
  coupons         coupons[]
  campaigns       campaigns[]

  @@index([influencer_id])
}

model transactions {
  id                String         @id @default(uuid()) @db.Uuid
  user_id           String         @db.Uuid
  package_id        String         @db.Uuid
  amount_paid       Decimal        @db.Decimal(10, 2)
  status            TransactionStatus
  payment_provider  String         @db.VarChar(50)
  transaction_ref   String         @unique @db.VarChar(100)
  codes_generated   Int
  coupon_id         String?        @db.Uuid
  timestamp         DateTime       @default(now())

  user              users          @relation(fields: [user_id], references: [id])
  package           packages       @relation(fields: [package_id], references: [id])
  coupon            coupons?       @relation(fields: [coupon_id], references: [id])
  codes             codes[]

  @@index([user_id, timestamp])
  @@index([status])
}

model codes {
  id              String     @id @default(uuid()) @db.Uuid
  transaction_id  String     @db.Uuid
  code_value      String     @unique @db.VarChar(20)
  type            CodeType
  weight_override Decimal?   @db.Decimal(5, 2)
  is_used         Boolean    @default(false)
  spin_id         String?    @db.Uuid @unique
  created_at      DateTime   @default(now())

  transaction     transactions  @relation(fields: [transaction_id], references: [id])
  spin            spins?        // sem @relation: definido no lado "spins"

  @@index([transaction_id])
  @@index([is_used])
}

model spins {
  id                  String         @id @default(uuid()) @db.Uuid
  user_id             String         @db.Uuid
  code_id             String         @db.Uuid @unique
  points_awarded      Decimal        @db.Decimal(10, 2)
  seed                String         @db.VarChar(64)
  probabilities_used  Json
  horario_slot_id     String?        @db.Uuid
  timestamp           DateTime       @default(now())

  user                users          @relation(fields: [user_id], references: [id])
  code                codes          @relation(fields: [code_id], references: [id])
  horario_slot        horario_slots? @relation(fields: [horario_slot_id], references: [id])
  points_histories    points_histories[]
}

model points_histories {
  id             String     @id @default(uuid()) @db.Uuid
  user_id        String     @db.Uuid
  change_amount  Decimal    @db.Decimal(10, 2)
  reason         PointReason
  reference_id   String?    @db.Uuid
  timestamp      DateTime   @default(now())

  user           users      @relation(fields: [user_id], references: [id])
  spin           spins?     @relation(fields: [reference_id], references: [id])

  @@index([user_id, timestamp])
  @@index([reason])
}
model products {
  id               String     @id @default(uuid()) @db.Uuid
  name             String     @db.VarChar(100)
  description      String?    @db.Text
  points_required  Decimal    @db.Decimal(10, 2)
  real_cost        Decimal    @db.Decimal(10, 2)
  stock            Int        @default(0)
  influencer_id    String?    @db.Uuid
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  influencer       influencers? @relation(fields: [influencer_id], references: [user_id])
  redeems          redeems[]

  @@index([points_required])
  @@index([influencer_id])
}

model redeems {
  id            String     @id @default(uuid()) @db.Uuid
  user_id       String     @db.Uuid
  product_id    String     @db.Uuid
  points_used   Decimal    @db.Decimal(10, 2)
  status        RedeemStatus
  timestamp     DateTime   @default(now())

  user          users      @relation(fields: [user_id], references: [id])
  product       products   @relation(fields: [product_id], references: [id])

  @@index([user_id, timestamp])
  @@index([status])
}

model coupons {
  id                String     @id @default(uuid()) @db.Uuid
  code              String     @unique @db.VarChar(20)
  discount_percent  Decimal    @db.Decimal(5, 2)
  expire_date       DateTime   @db.Date
  user_id           String?    @db.Uuid
  package_id        String?    @db.Uuid
  is_used           Boolean    @default(false)
  created_at        DateTime   @default(now())

  user              users?     @relation(fields: [user_id], references: [id])
  package           packages?  @relation(fields: [package_id], references: [id])
  transactions      transactions[]

  @@index([expire_date])
  @@index([user_id])
}

model horario_slots {
  id                 String     @id @default(uuid()) @db.Uuid
  start_time         DateTime   @db.Time
  end_time           DateTime   @db.Time
  boost_multiplier   Decimal    @default(1.00) @db.Decimal(3, 2)
  is_active          Boolean    @default(true)
  influencer_id      String?    @db.Uuid

  influencer         influencers? @relation(fields: [influencer_id], references: [user_id])
  spins              spins[]

  @@index([start_time, end_time])
  @@index([is_active])
}

model campaigns {
  id                 String     @id @default(uuid()) @db.Uuid
  influencer_id      String     @db.Uuid
  name               String     @db.VarChar(100)
  start_date         DateTime   @db.Date
  end_date           DateTime?  @db.Date
  target_followers   Int?
  conversion_rate    Decimal?   @db.Decimal(5, 2)
  created_at         DateTime   @default(now())

  influencer         influencers @relation(fields: [influencer_id], references: [user_id])
  packages           packages[]

  @@index([influencer_id, start_date])
}

model streaks {
  id                   String   @id @default(uuid()) @db.Uuid
  user_id              String   @unique @db.Uuid
  streak_count         Int      @default(0)
  last_activity_date   DateTime @db.Date
  bonus_awarded        Boolean  @default(false)

  user                 users    @relation(fields: [user_id], references: [id])

  @@index([user_id, last_activity_date])
}

model badges {
  id               String   @id @default(uuid()) @db.Uuid
  user_id          String   @db.Uuid
  badge_type       BadgeType
  awarded_at       DateTime @default(now())

  user             users    @relation(fields: [user_id], references: [id])

  @@index([user_id, badge_type])
}
model audit_logs {
  id           String     @id @default(uuid()) @db.Uuid
  action_type  ActionType
  user_id      String?    @db.Uuid
  details      Json
  timestamp    DateTime   @default(now())

  user         users?     @relation(fields: [user_id], references: [id])

  @@index([action_type, timestamp])
}

model margin_configs {
  id                  String   @id @default(uuid()) @db.Uuid
  rtp_target          Decimal  @default(70.00) @db.Decimal(5, 2)
  margin_threshold    Decimal  @default(30.00) @db.Decimal(5, 2)
  auto_adjust_probs   Boolean  @default(true)
  influencer_id       String?  @db.Uuid
  version             Int
  created_at          DateTime @default(now())

  influencer          influencers? @relation(fields: [influencer_id], references: [user_id])

  @@unique([influencer_id, version])
  @@index([influencer_id, version])
}

model leaderboards {
  id       String   @id @default(uuid()) @db.Uuid
  user_id  String   @db.Uuid
  score    Decimal  @db.Decimal(10, 2)
  period   Period
  rank     Int?

  user     users    @relation(fields: [user_id], references: [id])

  @@index([period])
  @@index([user_id])
}

model referrals {
  id             String   @id @default(uuid()) @db.Uuid
  referrer_id    String   @db.Uuid
  referred_id    String   @db.Uuid
  bonus_awarded  Decimal  @db.Decimal(10, 2)
  timestamp      DateTime @default(now())

  referrer       users    @relation("referrer", fields: [referrer_id], references: [id])
  referred       users    @relation("referred", fields: [referred_id], references: [id])

  @@unique([referrer_id, referred_id])
  @@index([referrer_id])
}
